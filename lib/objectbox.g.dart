// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/category.dart';
import 'models/note.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2245032913020965502),
      name: 'Category',
      lastPropertyId: const IdUid(3, 6345345979119243661),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4531833613288322495),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2115689179082013380),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6345345979119243661),
            name: 'addTime',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'notes', srcEntity: 'Note', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 8080901668258035391),
      name: 'Note',
      lastPropertyId: const IdUid(7, 6326387507491264020),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7410372646555580749),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8594772438348318397),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4191023267689112879),
            name: 'addDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5864318801047519503),
            name: 'dueDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5256682116376502868),
            name: 'time',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5662722623082263459),
            name: 'isDone',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6326387507491264020),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 469495781288228279),
            relationTarget: 'Category')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 8080901668258035391),
      lastIndexId: const IdUid(1, 469495781288228279),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Category: EntityDefinition<Category>(
        model: _entities[0],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {
              RelInfo<Note>.toOneBacklink(
                      7, object.id, (Note srcObject) => srcObject.category):
                  object.notes
            },
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.addTime.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Category(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              addTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)));
          InternalToManyAccess.setRelInfo(
              object.notes,
              store,
              RelInfo<Note>.toOneBacklink(
                  7, object.id, (Note srcObject) => srcObject.category),
              store.box<Category>());
          return object;
        }),
    Note: EntityDefinition<Note>(
        model: _entities[1],
        toOneRelations: (Note object) => [object.category],
        toManyRelations: (Note object) => {},
        getId: (Note object) => object.id,
        setId: (Note object, int id) {
          object.id = id;
        },
        objectToFB: (Note object, fb.Builder fbb) {
          final dataOffset = fbb.writeString(object.data);
          final timeOffset =
              object.time == null ? null : fbb.writeString(object.time!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dataOffset);
          fbb.addInt64(2, object.addDate?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.dueDate.millisecondsSinceEpoch);
          fbb.addOffset(4, timeOffset);
          fbb.addBool(5, object.isDone);
          fbb.addInt64(6, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final addDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = Note(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              addDate: addDateValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(addDateValue),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              dueDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              time: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12))
            ..isDone =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.category.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.id]
  static final id = QueryIntegerProperty<Category>(_entities[0].properties[0]);

  /// see [Category.name]
  static final name = QueryStringProperty<Category>(_entities[0].properties[1]);

  /// see [Category.addTime]
  static final addTime =
      QueryIntegerProperty<Category>(_entities[0].properties[2]);
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// see [Note.id]
  static final id = QueryIntegerProperty<Note>(_entities[1].properties[0]);

  /// see [Note.data]
  static final data = QueryStringProperty<Note>(_entities[1].properties[1]);

  /// see [Note.addDate]
  static final addDate = QueryIntegerProperty<Note>(_entities[1].properties[2]);

  /// see [Note.dueDate]
  static final dueDate = QueryIntegerProperty<Note>(_entities[1].properties[3]);

  /// see [Note.time]
  static final time = QueryStringProperty<Note>(_entities[1].properties[4]);

  /// see [Note.isDone]
  static final isDone = QueryBooleanProperty<Note>(_entities[1].properties[5]);

  /// see [Note.category]
  static final category =
      QueryRelationToOne<Note, Category>(_entities[1].properties[6]);
}
